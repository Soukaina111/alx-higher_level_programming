Module ``0-add_integer``

Using ``add_integer method``
---------------------

Import function from module:

    >>> add_integer = __import__('0-add_integer').add_integer

Test 1 int argument:

    >>> add_integer(22)
    120

Test default case:

    >>> add_integer(0)
    98

Test 1 float:

    >>> add_integer(101.4)
    199

Test 1 negative float:

    >>> add_integer(-90.5)
    8

Test 2 integers:

    >>> add_integer(50, 5)
    55

Test 2 big integers:

    >>> add_integer(9999999980, 9999999991)
    19999999971

Test both types of  integers:

    >>> add_integer(34263478, -98234582395)
    -98200318917

Test negative, positive integers:

    >>> add_integer(-13947692, 57234)
    -13890458

Test an integer and a float:

    >>> add_integer(163, 7.987)
    170

Test a float and an integer:

    >>> add_integer(434234.43545, 4352345)
    4786579

Test 2 floats:

    >>> add_integer(1.9, 0.9)
    1

Add infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Add Not A NULL:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Test invalid first arg:

    >>> add_integer("foo", 0)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test invalid second arg:

    >>> add_integer(123123, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Test 2 invalid args:

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test 2 strings:

    >>> add_integer("foo", "bar")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
    
