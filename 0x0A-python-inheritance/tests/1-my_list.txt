The ``1-my_list`` module
============================

Using ``1-mylist``
---------------------

Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Correct Class Type test:
    >>> ml = MyList()
    >>> type(ml) == MyList
    True

Correct Instance test:
    >>> ml = MyList()
    >>> isinstance(ml, list)
    True

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>



Empty list test:
    >>> ml = MyList()
    >>> ml.print_sorted()
    []

Normal list test:
    >>> ml = MyList([122, 100, 16])
    >>> ml.print_sorted()
    [16, 100, 122]

Normal list test B:
    >>> ml = MyList([71, 54, 12, 13, 95])
    >>> ml.print_sorted()
    [12, 13, 54, 71, 95]

Negative ints list test:
    >>> ml = MyList([-10006, -986, -2325656, 1, -234234346, -1236])
    >>> ml.print_sorted()
    [-234234346, -2325656, -10006, -1236, -986, 1]


List already sorted:
    >>> ml = MyList([-2024, 15, 16, 21, 103, 202, 1007])
    >>> ml.print_sorted()
    [-2024, 15, 16, 21, 103, 202, 1007]

print_sorted method called with 1 arg:
    >>> ml.print_sorted([54, 7, 12])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Original list unchanged:
    >>> ml = MyList([2, 10, 1, -17, 20, 342, 0])
    >>> ml.print_sorted()
    [-17, 0, 1, 2, 10, 20, 342]
    >>> ml
    [2, 10, 1, -17, 20, 342, 0]



append to an empty list:
    >>> ml = MyList()
    >>> ml.append(1)
    >>> ml
    [1]

print_sorted method called with 2 args:
    >>> ml.print_sorted([-7, 8, 15], 190)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given


print_sorted method called via class with no args:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

